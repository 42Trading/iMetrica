/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class ch_imetrica_mdfa_IMDFA */

#ifndef _Included_ch_imetrica_mdfa_IMDFA
#define _Included_ch_imetrica_mdfa_IMDFA
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    findOptimalFilter
 * Signature: ([DIIIIIIDD[DDDDII[D[DDDDDD)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_findOptimalFilter
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jint, jint, jint, jint, jdouble, jdouble, jdoubleArray, jdouble, jdouble, jdouble, jint, jint, jdoubleArray, jdoubleArray, jdouble, jdouble, jdouble, jdouble, jdouble);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    computeScore
 * Signature: (I[D[DI)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_computeScore
  (JNIEnv *, jobject, jint, jdoubleArray, jdoubleArray, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    IMDFAold
 * Signature: ([DIIIII[DDDDIII)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_IMDFAold
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jint, jint, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    IMDFAiter
 * Signature: ([DIIIII[DDDDIII[D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_IMDFAiter
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jint, jint, jint, jdoubleArray);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    IDFA
 * Signature: ([DIIII[DDDDIII)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_IDFA
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jint, jint, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    IDFAiter
 * Signature: ([DIIII[DDDDIII)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_IDFAiter
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jint, jint, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    IMDFAreg
 * Signature: ([DIIIII[DDDDDDDIII[DDDD[DZ)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_IMDFAreg
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jdoubleArray, jboolean);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    IDFAreg
 * Signature: ([DIIII[DDDDDDDIIIDDZ[DI)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_IDFAreg
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jdouble, jdouble, jboolean, jdoubleArray, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    computeQDeviation
 * Signature: (IIII)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_computeQDeviation
  (JNIEnv *, jobject, jint, jint, jint, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    tradingDiffSingle
 * Signature: ([D[D[DIIDID[D)V
 */
JNIEXPORT void JNICALL Java_ch_imetrica_mdfa_IMDFA_tradingDiffSingle
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray, jdoubleArray, jint, jint, jdouble, jint, jdouble, jdoubleArray);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    SPEC_IMDFAreg
 * Signature: ([DIII[D[DIII[DDDDDDDIII[DDDDD[DZ[DIII[D[DDI)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_SPEC_1IMDFAreg
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jint, jdoubleArray, jdoubleArray, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jdouble, jdoubleArray, jboolean, jdoubleArray, jint, jint, jint, jdoubleArray, jdoubleArray, jdouble, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    SPEC_IDFAreg
 * Signature: ([DII[D[DIII[DDDDDDDIIIDDDZ[DIII[D[DDI)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_SPEC_1IDFAreg
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jdoubleArray, jdoubleArray, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jdouble, jdouble, jdouble, jboolean, jdoubleArray, jint, jint, jint, jdoubleArray, jdoubleArray, jdouble, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    GEN_IMDFAreg
 * Signature: ([DIIIII[DDDDDDDIII[DDDDD[DZ[DIII[D[DDI)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_GEN_1IMDFAreg
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jdouble, jdoubleArray, jboolean, jdoubleArray, jint, jint, jint, jdoubleArray, jdoubleArray, jdouble, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    GEN_IDFAreg
 * Signature: ([DIIII[DDDDDDDIIIDDDZ[DIII[D[DDI)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_GEN_1IDFAreg
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jdouble, jdouble, jdouble, jboolean, jdoubleArray, jint, jint, jint, jdoubleArray, jdoubleArray, jdouble, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    H0_IMDFAreg
 * Signature: ([DIIIII[DDDDDDDIII[DDDDD[DZ[DIII[D[DDI[D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_H0_1IMDFAreg
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jdouble, jdoubleArray, jboolean, jdoubleArray, jint, jint, jint, jdoubleArray, jdoubleArray, jdouble, jint, jdoubleArray);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    gridSearch
 * Signature: ([D[DIIIIDDDDDIIIDDDD[DIID[D[DI)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_gridSearch
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray, jint, jint, jint, jint, jdouble, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jdouble, jdouble, jdouble, jdouble, jdoubleArray, jint, jint, jdouble, jdoubleArray, jdoubleArray, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    gridSearchCutoff
 * Signature: ([DIIIIDDDDDIIIDDDD[DIID[D[DI)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_gridSearchCutoff
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jint, jint, jdouble, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jdouble, jdouble, jdouble, jdouble, jdoubleArray, jint, jint, jdouble, jdoubleArray, jdoubleArray, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    gridSearchBandCutoff
 * Signature: ([DIIIIDDDDDIIIDDDD[DIID[D[DI)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_gridSearchBandCutoff
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jint, jint, jdouble, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jdouble, jdouble, jdouble, jdouble, jdoubleArray, jint, jint, jdouble, jdoubleArray, jdoubleArray, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    gridSearchMultiBandCutoff
 * Signature: ([DIIIIDDDDDIIIDDDD[DIID[D[DI)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_gridSearchMultiBandCutoff
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jint, jint, jdouble, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jdouble, jdouble, jdouble, jdouble, jdoubleArray, jint, jint, jdouble, jdoubleArray, jdoubleArray, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    gridSearchRegularization
 * Signature: ([D[DIIIIDDDDDIIIDDDD[DIIDI[D[DI)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_gridSearchRegularization
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray, jint, jint, jint, jint, jdouble, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jdouble, jdouble, jdouble, jdouble, jdoubleArray, jint, jint, jdouble, jint, jdoubleArray, jdoubleArray, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    optimizeRegularization
 * Signature: ([D[DIIIIDDDDDIIIDDDD[DIIDI)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_optimizeRegularization
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray, jint, jint, jint, jint, jdouble, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jdouble, jdouble, jdouble, jdouble, jdoubleArray, jint, jint, jdouble, jint);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    updateSignal
 * Signature: ([DIIIII[DDDDDDDIII[DDDDD[D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_updateSignal
  (JNIEnv *, jobject, jdoubleArray, jint, jint, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble, jint, jint, jint, jdoubleArray, jdouble, jdouble, jdouble, jdouble, jdoubleArray);

/*
 * Class:     ch_imetrica_mdfa_IMDFA
 * Method:    optimalPortfolio
 * Signature: ([DII)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ch_imetrica_mdfa_IMDFA_optimalPortfolio
  (JNIEnv *, jclass, jdoubleArray, jint, jint);

#ifdef __cplusplus
}
#endif
#endif
